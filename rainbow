/*----------------------------------------------------------------------*
 * Timezone library example sketch.                                     *
 * Self-adjusting clock for one time zone using an external real-time   *
 * clock, either a DS1307 or DS3231 (e.g. Chronodot).                   *
 * Assumes the RTC is set to UTC.                                       *
 * TimeChangeRules can be hard-coded or read from EEPROM, see comments. *
 * Check out the Chronodot at http://www.macetech.com/store/            *
 *                                                                      *
 * Jack Christensen Aug 2012                                            *
 *                                                                      *
 * This work is licensed under the Creative Commons Attribution-        *
 * ShareAlike 3.0 Unported License. To view a copy of this license,     *
 * visit http://creativecommons.org/licenses/by-sa/3.0/ or send a       *
 * letter to Creative Commons, 171 Second Street, Suite 300,            *
 * San Francisco, California, 94105, USA.                               *
 *----------------------------------------------------------------------*/

#include <DS3232RTC.h>   //http://www.arduino.cc/playground/Code/Time
#include <Time.h>        //http://www.arduino.cc/playground/Code/Time
#include <Timezone.h>    //https://github.com/JChristensen/Timezone
#include <Wire.h>        //http://arduino.cc/en/Reference/Wire (supplied with the Arduino IDE)
#include <TimeLib.h>
#include <Streaming.h>
#include <Adafruit_NeoPixel.h>

// Which pin on the Arduino is connected to the LEDs?
#define PIN 12
 
// How many LED are attached to the Arduino?
#define NUMPIXELS 99

boolean isPast = false;

// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ400);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(25, 6, NEO_GRB + NEO_KHZ400);

//United Kingdom (London, Belfast)
TimeChangeRule BST = {"BST", Last, Sun, Mar, 1, 60};        //British Summer Time
TimeChangeRule GMT = {"GMT", Last, Sun, Oct, 2, 0};         //Standard Time
Timezone UK(BST, GMT);

//If TimeChangeRules are already stored in EEPROM, comment out the three
//lines above and uncomment the line below.
//Timezone myTZ(100);       //assumes rules stored at EEPROM address 100

TimeChangeRule *tcr;        //pointer to the time change rule, use to get TZ abbrev
time_t utc, local;

void setup(void)
{
    Serial.begin(115200);
    
    pixels.begin(); // This initializes the NeoPixel library.
    strip.begin();
        
    setSyncProvider(RTC.get);   // the function to get the time from the RTC
    if(timeStatus()!= timeSet) 
        Serial.println("Unable to sync with the RTC");
    else
        Serial.println("RTC has set the system time");      
}

void loop(void)
{
    Serial.println();
    utc = now();
    printTime(utc, "UTC");
    local = UK.toLocal(utc, &tcr);
    printTime(local, tcr -> abbrev);
    delay(1000);
    static time_t tLast;
    time_t t;
    tmElements_t tm;

    //check for input to set the RTC, minimum length is 12, i.e. yy,m,d,h,m,s
    if (Serial.available() >= 12) {
        //note that the tmElements_t Year member is an offset from 1970,
        //but the RTC wants the last two digits of the calendar year.
        //use the convenience macros from Time.h to do the conversions.
        int y = Serial.parseInt();
        if (y >= 100 && y < 1000)
            Serial << F("Error: Year must be two digits or four digits!") << endl;
        else {
            if (y >= 1000)
                tm.Year = CalendarYrToTm(y);
            else    //(y < 100)
                tm.Year = y2kYearToTm(y);
            tm.Month = Serial.parseInt();
            tm.Day = Serial.parseInt();
            tm.Hour = Serial.parseInt();
            tm.Minute = Serial.parseInt();
            tm.Second = Serial.parseInt();
            t = makeTime(tm);
            RTC.set(t);        //use the time_t value to ensure correct weekday is set
            setTime(t);        
            Serial << F("RTC set to: ");
            printTime(t, local);
            Serial << endl;
            //dump any extraneous input
            while (Serial.available() > 0) Serial.read();
        }
    }
    
    t = now();
    if (t != tLast) {
        tLast = t;
        if (second(t) == 0) {
            float c = RTC.temperature() / 4.;
            float f = c * 9. / 5. + 32.;
            Serial << F("  ") << c << F(" C  ") << f << F(" F");
        }

        displayLeds(local);
        displayStrip();
         
        Serial << endl;
        
    }
}

void displayStrip(){
    // Flash "Merry Christmas" special message if date is between 22nd Dec and 28th Dec.
     if(day(local) == 15 && month(local) == 8)
     {showHappyBirthday();
     } else
     { strip.show();    
    }}

void displayLeds(time_t local) {
    pixels.clear();
        {
      showItIs();
 
      if(minute(local) < 5) {
        isPast = true;
        showOclock();
      } else if(minute(local) < 10) {
        showFive();
        showPast();
      } else if(minute(local) < 15) {
        showTen();
        showPast();
      } else if(minute(local) < 20) {
        showQuarter();
        showPast();
      } else if(minute(local) < 25) {
        showTwenty();
        showPast();
      } else if(minute(local) < 30) {
        showTwentyFive();
        showPast();
      } else if(minute(local) < 35) {
        showHalf();
        showPast();
      } else if(minute(local) < 40) {
        showTwentyFive();
        showTo();
      } else if(minute(local) < 45) {
        showTwenty();
        showTo();
      } else if(minute(local) < 50) {
        showQuarter();
        showTo();
      } else if(minute(local) < 55) {
        showTen();
        showTo();
      } else {
        showFive();
        showTo();
      }
 
      if(hour(local) == 0 || hour(local) == 12) {
        if(isPast) {
          showHourTwelve();
        } else {
          showHourOne();
        }
      } else if(hour(local) == 1 || hour(local) == 13) {
        if(isPast) {
          showHourOne();
        } else {
          showHourTwo();
        }
      } else if(hour(local) == 2 || hour(local) == 14) {
        if(isPast) {
          showHourTwo();
        } else {
          showHourThree();
        }
      } else if(hour(local) == 3 || hour(local) == 15) {
        if(isPast) {
          showHourThree();
        } else {
          showHourFour();
        }
      } else if(hour(local) == 4 || hour(local) == 16) {
        if(isPast) {
          showHourFour();
        } else {
          showHourFive();
        }
      } else if(hour(local) == 5 || hour(local) == 17) {
        if(isPast) {
          showHourFive();
        } else {
          showHourSix();
        }
      } else if(hour(local) == 6 || hour(local) == 18) {
        if(isPast) {
          showHourSix();
        } else {
          showHourSeven();
        }
      } else if(hour(local) == 7 || hour(local) == 19) {
        if(isPast) {
          showHourSeven();
        } else {
          showHourEight();
        }
      } else if(hour(local) == 8 || hour(local) == 20) {
        if(isPast) {
          showHourEight();
        } else {
          showHourNine();
        }
      } else if(hour(local) == 9 || hour(local) == 21) {
        if(isPast) {
          showHourNine();
        } else {
          showHourTen();
        }
      } else if(hour(local) == 10 || hour(local) == 22) {
        if(isPast) {
          showHourTen();
        } else {
          showHourEleven();
        }
      } else if(hour(local) == 11 || hour(local) == 23) {
        if(isPast) {
          showHourEleven();
        } else {
          showHourTwelve();
        }
      }
    }
 
    pixels.show(); // This sends the updated pixel color to the hardware.
}

void showItIs() {
  setPixelOn(0);
  setPixelOn(1);
 
  setPixelOn(2);
  setPixelOn(3);
}
 
void showTwenty() {
  setPixelOn(11);
  setPixelOn(12);
  setPixelOn(13);
  setPixelOn(14);
  setPixelOn(15);
  setPixelOn(16);
}
 
void showTwentyFive() {
  showTwenty();
  showFive();
}
 
void showQuarter() {
  setPixelOn(17);
  setPixelOn(18);
  setPixelOn(19);
  setPixelOn(20);
  setPixelOn(21);
  setPixelOn(22);
  setPixelOn(23);
}
 
void showHalf() {
  setPixelOn(7);
  setPixelOn(8);
  setPixelOn(9);
  setPixelOn(10);
}

void showHappyBirthday() {
  showHappy();
  showBirthday();
}

void showHappyAnniversary() {
  showHappy();
  showAnniversary();
}

void showHappy() {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i<4; i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(10);
  }
}

void showBirthday() {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=5; i<12; i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(10);
  }
}

void showAnniversary() {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=13; i<22; i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(10);
  }
}

void showTen() {
  setPixelOn(4);
  setPixelOn(5);
  setPixelOn(6);
}
 
void showFive() {
  setPixelOn(24);
  setPixelOn(25);
  setPixelOn(26);
  setPixelOn(27);
}
 
void showPast() {
  isPast = true;
 
  setPixelOn(38);
  setPixelOn(39);
  setPixelOn(40);
  setPixelOn(41);
}
 
void showTo() {
  isPast = false;
 
  setPixelOn(36);
  setPixelOn(37);
}
 
void showOclock() {
  setPixelOn(87);
  setPixelOn(88);
  setPixelOn(89);
  setPixelOn(90);
  setPixelOn(91);
  setPixelOn(92);
}
 
void showHourOne() {
  setPixelOn(42);
  setPixelOn(43);
  setPixelOn(44);
}
 
void showHourTwo() {
  setPixelOn(60);
  setPixelOn(61);
  setPixelOn(62);
}
 
void showHourThree() {
  setPixelOn(45);
  setPixelOn(46);
  setPixelOn(47);
  setPixelOn(48);
  setPixelOn(49);
}
 
void showHourFour() {
  setPixelOn(50);
  setPixelOn(51);
  setPixelOn(52);
  setPixelOn(53);
}
 
void showHourFive() {
  setPixelOn(73);
  setPixelOn(74);
  setPixelOn(75);
  setPixelOn(76);
}
 
void showHourSix() {
  setPixelOn(81);
  setPixelOn(82);
  setPixelOn(83);
}
 
void showHourSeven() {
  setPixelOn(63);
  setPixelOn(64);
  setPixelOn(65);
  setPixelOn(66);
  setPixelOn(67);
}
 
void showHourEight() {
  setPixelOn(68);
  setPixelOn(69);
  setPixelOn(70);
  setPixelOn(71);
  setPixelOn(72);
}
 
void showHourNine() {
  setPixelOn(77);
  setPixelOn(78);
  setPixelOn(79);
  setPixelOn(80);
}
 
void showHourTen() {
  setPixelOn(84);
  setPixelOn(85);
  setPixelOn(86);
}
 
void showHourEleven() {
  setPixelOn(54);
  setPixelOn(55);
  setPixelOn(56);
  setPixelOn(57);
  setPixelOn(58);
  setPixelOn(59);
}
 
void showHourTwelve() {
  setPixelOn(93);
  setPixelOn(94);
  setPixelOn(95);
  setPixelOn(96);
  setPixelOn(97);
  setPixelOn(98);
}
 
void setPixelOn(int pixel) {
    setPixelPink(pixel);
}
 
void setPixelRed(int pixel) {
    pixels.setPixelColor(pixel, pixels.Color(150,0,0));
}
 
void setPixelGreen(int pixel) {
    pixels.setPixelColor(pixel, pixels.Color(0,150,0));
}
 
void setPixelPink(int pixel) {
    pixels.setPixelColor(pixel, pixels.Color(150,0,80));
}

//Function to print time with time zone
void printTime(time_t t, char *tz)
{
    sPrintI00(hour(t));
    sPrintDigits(minute(t));
    sPrintDigits(second(t));
    Serial.print(' ');
    Serial.print(dayShortStr(weekday(t)));
    Serial.print(' ');
    sPrintI00(day(t));
    Serial.print(' ');
    Serial.print(monthShortStr(month(t)));
    Serial.print(' ');
    Serial.print(year(t));
    Serial.print(' ');
    Serial.print(tz);
    Serial.println();
}

//Print an integer in "00" format (with leading zero).
//Input value assumed to be between 0 and 99.
void sPrintI00(int val)
{
    if (val < 10) Serial.print('0');
    Serial.print(val, DEC);
    return;
}

//Print an integer in ":00" format (with leading zero).
//Input value assumed to be between 0 and 99.
void sPrintDigits(int val)
{
    Serial.print(':');
    if(val < 10) Serial.print('0');
    Serial.print(val, DEC);
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
